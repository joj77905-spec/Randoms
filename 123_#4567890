math.randomseed(tick())

local function randomString(len)
    local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
    local s = ""
    for i = 1, len do
        s = s .. chars:sub(math.random(1, #chars), math.random(1, #chars))
    end
    return s
end

local function base64encode(data)
    local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    local bitstr=""
    for i=1,#data do
        local byte=data:byte(i)
        for bit=7,0,-1 do
            bitstr = bitstr .. ((byte % 2^(bit+1) - byte % 2^bit > 0) and "1" or "0")
        end
    end
    local pad = (6 - (#bitstr % 6)) % 6
    for i=1,pad do bitstr = bitstr.."0" end
    local out = {}
    for i=1,#bitstr,6 do
        local chunk = bitstr:sub(i,i+5)
        local val=0
        for j=1,6 do val = val*2 + (chunk:sub(j,j)=="1" and 1 or 0) end
        out[#out+1] = b:sub(val+1,val+1)
    end
    local eq=""
    local mod=#data%3
    if mod==1 then eq="==" elseif mod==2 then eq="=" end
    return table.concat(out)..eq
end

local function customEncode(str)
    local map = {}
    local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    local shuffled = "QWERTYUIOPLKJHGFDSAZXCVBNMmnbvcxzlkjhgfdsapoiuytrewq0987654321+/"
    for i=1,#chars do map[chars:sub(i,i)] = shuffled:sub(i,i) end
    local result = ""
    for i=1,#str do
        result = result .. (map[str:sub(i,i)] or str:sub(i,i))
    end
    return result
end

local function generateJunk(reserved)
    reserved = reserved or {}
    local function isReserved(name)
        for _,v in ipairs(reserved) do if v==name then return true end end
        return false
    end
    local out = "do\n"
    for i=1,math.random(10,18) do
        local t = math.random(1,4)
        local name = randomString(7)
        while isReserved(name) do name = randomString(7) end
        if t==1 then
            out = out.."  local "..name.."="..tostring(math.random(100,999)).."\n"
        elseif t==2 then
            out = out.."  local function "..name.."() return "..tostring(math.random(1,99)).." end\n"
        elseif t==3 then
            out = out.."  for _"..randomString(4).."=1,1 do end\n"
        else
            out = out.."  if false then "..name.."() end\n"
        end
    end
    out = out.."end\n"
    return out
end

local function safeChunkString(s,size)
    local chunks = {}
    local last = 1
    while last <= #s do
        chunks[#chunks+1] = s:sub(last,last+size-1)
        last = last + size
    end
    return chunks
end

local function obfuscateScript(code)
    local b64 = base64encode(code)
    local encoded = customEncode(b64)
    local decoderName1 = "d_"..randomString(8)
    local decoderName2 = "d_"..randomString(8)
    local scriptVar = "s_"..randomString(8)
    local funcVar = "f_"..randomString(8)
    local junk = generateJunk({decoderName1, decoderName2, scriptVar, funcVar})
    local chunk = junk
    local parts = safeChunkString(encoded,30)
    local partsVar = "p_"..randomString(8)
    chunk = chunk.."local "..partsVar.."={}\n"
    for i,part in ipairs(parts) do
        chunk = chunk..partsVar.."["..i.."]="..string.format("%q",part)
        if i<#parts then chunk=chunk..";" else chunk=chunk.."\n" end
    end
    chunk = chunk.."local function concatParts(p)local s='' for i=1,#p do s=s..p[i] end return s end\n"
    chunk = chunk.."local function "..decoderName1.."(data)local map={} local chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' local shuffled='QWERTYUIOPLKJHGFDSAZXCVBNMmnbvcxzlkjhgfdsapoiuytrewq0987654321+/' for i=1,#chars do map[shuffled:sub(i,i)]=chars:sub(i,i) end local result='' for i=1,#data do local c=data:sub(i,i) result=result..(map[c] or c) end return result end\n"
    chunk = chunk.."local function "..decoderName2.."(data)local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' data=string.gsub(data,'[^'..b..'=]','') local bin='' local out={} for i=1,#data do local c=data:sub(i,i) if c=='=' then break end local idx=b:find(c) if not idx then return '' end local val=idx-1 for bit=6,1,-1 do bin=bin..(val%2^bit-val%2^(bit-1)>0 and '1' or '0') end while #bin>=8 do local byteStr=bin:sub(1,8) local num=0 for j=1,8 do num=num*2+(byteStr:sub(j,j)=='1' and 1 or 0) end out[#out+1]=string.char(num) bin=bin:sub(9) end end return table.concat(out) end\n"
    chunk = chunk.."local loader=loadstring or load "
    chunk = chunk.."local ok,res=pcall(function() "
    chunk = chunk.."local "..scriptVar.."=concatParts("..partsVar..") "
    chunk = chunk.."local tmp="..decoderName1.."("..scriptVar..") "
    chunk = chunk.."local decoded="..decoderName2.."(tmp) "
    chunk = chunk.."if not decoded or decoded=='' then error('Decoding failed') end "
    chunk = chunk.."if not loader then error('No loader available') end "
    chunk = chunk.."local "..funcVar..",err=loader(decoded) "
    chunk = chunk.."if not "..funcVar.." then error(err) end "
    chunk = chunk.."return "..funcVar.."() "
    chunk = chunk.."end) if not ok then warn('[Machine VM Error] '..tostring(res)) end\n"
    return chunk
end
